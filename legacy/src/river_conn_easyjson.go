// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels(in *jlexer.Lexer, out *serverKeys) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PublicKeys":
			if in.IsNull() {
				in.Skip()
				out.PublicKeys = nil
			} else {
				in.Delim('[')
				if out.PublicKeys == nil {
					if !in.IsDelim(']') {
						out.PublicKeys = make([]publicKey, 0, 2)
					} else {
						out.PublicKeys = []publicKey{}
					}
				} else {
					out.PublicKeys = (out.PublicKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v1 publicKey
					(v1).UnmarshalEasyJSON(in)
					out.PublicKeys = append(out.PublicKeys, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DHGroups":
			if in.IsNull() {
				in.Skip()
				out.DHGroups = nil
			} else {
				in.Delim('[')
				if out.DHGroups == nil {
					if !in.IsDelim(']') {
						out.DHGroups = make([]dHGroup, 0, 2)
					} else {
						out.DHGroups = []dHGroup{}
					}
				} else {
					out.DHGroups = (out.DHGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v2 dHGroup
					(v2).UnmarshalEasyJSON(in)
					out.DHGroups = append(out.DHGroups, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels(out *jwriter.Writer, in serverKeys) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PublicKeys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PublicKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.PublicKeys {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DHGroups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DHGroups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.DHGroups {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v serverKeys) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v serverKeys) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *serverKeys) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *serverKeys) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels(l, v)
}
func easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels1(in *jlexer.Lexer, out *publicKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "N":
			out.N = string(in.String())
		case "FingerPrint":
			out.FingerPrint = int64(in.Int64())
		case "E":
			out.E = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels1(out *jwriter.Writer, in publicKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"N\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.N))
	}
	{
		const prefix string = ",\"FingerPrint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FingerPrint))
	}
	{
		const prefix string = ",\"E\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.E))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v publicKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v publicKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *publicKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *publicKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels1(l, v)
}
func easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels2(in *jlexer.Lexer, out *dHGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Prime":
			out.Prime = string(in.String())
		case "Gen":
			out.Gen = int32(in.Int32())
		case "FingerPrint":
			out.FingerPrint = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels2(out *jwriter.Writer, in dHGroup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Prime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prime))
	}
	{
		const prefix string = ",\"Gen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Gen))
	}
	{
		const prefix string = ",\"FingerPrint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FingerPrint))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v dHGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v dHGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *dHGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *dHGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels2(l, v)
}
func easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels3(in *jlexer.Lexer, out *RiverConnectionJS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AuthID":
			out.AuthID = string(in.String())
		case "AuthKey":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.AuthKey[:], in.Bytes())
			}
		case "UserID":
			out.UserID = string(in.String())
		case "Username":
			out.Username = string(in.String())
		case "Phone":
			out.Phone = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels3(out *jwriter.Writer, in RiverConnectionJS) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AuthID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuthID))
	}
	{
		const prefix string = ",\"AuthKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.AuthKey[:])
	}
	{
		const prefix string = ",\"UserID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"Username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"FirstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"LastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RiverConnectionJS) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RiverConnectionJS) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RiverConnectionJS) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RiverConnectionJS) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels3(l, v)
}
func easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels4(in *jlexer.Lexer, out *RiverConnection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AuthID":
			out.AuthID = int64(in.Int64())
		case "AuthKey":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.AuthKey[:], in.Bytes())
			}
		case "UserID":
			out.UserID = int64(in.Int64())
		case "Username":
			out.Username = string(in.String())
		case "Phone":
			out.Phone = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		case "DiffTime":
			out.DiffTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels4(out *jwriter.Writer, in RiverConnection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AuthID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AuthID))
	}
	{
		const prefix string = ",\"AuthKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.AuthKey[:])
	}
	{
		const prefix string = ",\"UserID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"Username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"FirstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"LastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"DiffTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DiffTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RiverConnection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RiverConnection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson785d9294EncodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RiverConnection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RiverConnection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson785d9294DecodeGitRonaksoftwareComSnappfoodSocialSharedModelsDatamodels4(l, v)
}
